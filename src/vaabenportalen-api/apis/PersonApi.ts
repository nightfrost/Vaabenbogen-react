/* tslint:disable */
/* eslint-disable */
/**
 * VaabenportalenAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Person,
} from '../models/index';
import {
    PersonFromJSON,
    PersonToJSON,
} from '../models/index';

export interface CreatePersonRequest {
    person: Person;
}

export interface DeletePersonRequest {
    id: number;
}

export interface GetPeopleBySearchParametersRequest {
    firstname?: string;
    lastname?: string;
    cpr?: string;
    phone?: string;
    email?: string;
    weaponsPassportNumber?: string;
}

export interface GetPeopleBySearchQueryRequest {
    query: string;
}

export interface GetPersonByIdRequest {
    id: number;
}

export interface UpdatePersonRequest {
    id: number;
    person: Person;
}

/**
 * 
 */
export class PersonApi extends runtime.BaseAPI {

    /**
     */
    async createPersonRaw(requestParameters: CreatePersonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Person>> {
        if (requestParameters['person'] == null) {
            throw new runtime.RequiredError(
                'person',
                'Required parameter "person" was null or undefined when calling createPerson().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/person`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PersonToJSON(requestParameters['person']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PersonFromJSON(jsonValue));
    }

    /**
     */
    async createPerson(requestParameters: CreatePersonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Person> {
        const response = await this.createPersonRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deletePersonRaw(requestParameters: DeletePersonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deletePerson().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/person/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deletePerson(requestParameters: DeletePersonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deletePersonRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getAllPeopleRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Person>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/person`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PersonFromJSON));
    }

    /**
     */
    async getAllPeople(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Person>> {
        const response = await this.getAllPeopleRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getPeopleBySearchParametersRaw(requestParameters: GetPeopleBySearchParametersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Person>>> {
        const queryParameters: any = {};

        if (requestParameters['firstname'] != null) {
            queryParameters['firstname'] = requestParameters['firstname'];
        }

        if (requestParameters['lastname'] != null) {
            queryParameters['lastname'] = requestParameters['lastname'];
        }

        if (requestParameters['cpr'] != null) {
            queryParameters['cpr'] = requestParameters['cpr'];
        }

        if (requestParameters['phone'] != null) {
            queryParameters['phone'] = requestParameters['phone'];
        }

        if (requestParameters['email'] != null) {
            queryParameters['email'] = requestParameters['email'];
        }

        if (requestParameters['weaponsPassportNumber'] != null) {
            queryParameters['weaponsPassportNumber'] = requestParameters['weaponsPassportNumber'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/person/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PersonFromJSON));
    }

    /**
     */
    async getPeopleBySearchParameters(requestParameters: GetPeopleBySearchParametersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Person>> {
        const response = await this.getPeopleBySearchParametersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getPeopleBySearchQueryRaw(requestParameters: GetPeopleBySearchQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Person>>> {
        if (requestParameters['query'] == null) {
            throw new runtime.RequiredError(
                'query',
                'Required parameter "query" was null or undefined when calling getPeopleBySearchQuery().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/person/search={query}`.replace(`{${"query"}}`, encodeURIComponent(String(requestParameters['query']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PersonFromJSON));
    }

    /**
     */
    async getPeopleBySearchQuery(requestParameters: GetPeopleBySearchQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Person>> {
        const response = await this.getPeopleBySearchQueryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getPersonByIdRaw(requestParameters: GetPersonByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Person>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getPersonById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/person/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PersonFromJSON(jsonValue));
    }

    /**
     */
    async getPersonById(requestParameters: GetPersonByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Person> {
        const response = await this.getPersonByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updatePersonRaw(requestParameters: UpdatePersonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updatePerson().'
            );
        }

        if (requestParameters['person'] == null) {
            throw new runtime.RequiredError(
                'person',
                'Required parameter "person" was null or undefined when calling updatePerson().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/person/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PersonToJSON(requestParameters['person']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updatePerson(requestParameters: UpdatePersonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updatePersonRaw(requestParameters, initOverrides);
    }

}
