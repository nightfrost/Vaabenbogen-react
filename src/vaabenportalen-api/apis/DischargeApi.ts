/* tslint:disable */
/* eslint-disable */
/**
 * VaabenportalenAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Discharge,
} from '../models/index';
import {
    DischargeFromJSON,
    DischargeToJSON,
} from '../models/index';

export interface CreateDischargeRequest {
    discharge: Discharge;
}

export interface DeleteDischargeRequest {
    id: number;
}

export interface GetDischargeByIdRequest {
    id: number;
}

export interface UpdateDischargeRequest {
    id: number;
    discharge: Discharge;
}

/**
 * 
 */
export class DischargeApi extends runtime.BaseAPI {

    /**
     */
    async createDischargeRaw(requestParameters: CreateDischargeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Discharge>> {
        if (requestParameters['discharge'] == null) {
            throw new runtime.RequiredError(
                'discharge',
                'Required parameter "discharge" was null or undefined when calling createDischarge().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/discharge`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DischargeToJSON(requestParameters['discharge']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DischargeFromJSON(jsonValue));
    }

    /**
     */
    async createDischarge(requestParameters: CreateDischargeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Discharge> {
        const response = await this.createDischargeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteDischargeRaw(requestParameters: DeleteDischargeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteDischarge().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/discharge/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteDischarge(requestParameters: DeleteDischargeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteDischargeRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getAllDischargesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Discharge>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/discharge`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DischargeFromJSON));
    }

    /**
     */
    async getAllDischarges(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Discharge>> {
        const response = await this.getAllDischargesRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getDischargeByIdRaw(requestParameters: GetDischargeByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Discharge>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getDischargeById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/discharge/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DischargeFromJSON(jsonValue));
    }

    /**
     */
    async getDischargeById(requestParameters: GetDischargeByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Discharge> {
        const response = await this.getDischargeByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateDischargeRaw(requestParameters: UpdateDischargeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateDischarge().'
            );
        }

        if (requestParameters['discharge'] == null) {
            throw new runtime.RequiredError(
                'discharge',
                'Required parameter "discharge" was null or undefined when calling updateDischarge().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/discharge/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DischargeToJSON(requestParameters['discharge']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateDischarge(requestParameters: UpdateDischargeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateDischargeRaw(requestParameters, initOverrides);
    }

}
