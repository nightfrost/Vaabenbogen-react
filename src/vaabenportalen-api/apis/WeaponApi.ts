/* tslint:disable */
/* eslint-disable */
/**
 * VaabenportalenAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Weapon,
} from '../models/index';
import {
    WeaponFromJSON,
    WeaponToJSON,
} from '../models/index';

export interface CreateWeaponRequest {
    weapon: Weapon;
}

export interface DeleteWeaponRequest {
    id: number;
}

export interface GetWeaponByIdRequest {
    id: number;
}

export interface GetWeaponsBySearchParametersRequest {
    name?: string;
    manufacturer?: string;
    systemNumber?: string;
    barrelNumber?: string;
    basepieceNumber?: string;
}

export interface GetWeaponsBySearchQueryRequest {
    query: string;
}

export interface UpdateWeaponRequest {
    id: number;
    weapon: Weapon;
}

/**
 * 
 */
export class WeaponApi extends runtime.BaseAPI {

    /**
     */
    async createWeaponRaw(requestParameters: CreateWeaponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Weapon>> {
        if (requestParameters['weapon'] == null) {
            throw new runtime.RequiredError(
                'weapon',
                'Required parameter "weapon" was null or undefined when calling createWeapon().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/weapon`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WeaponToJSON(requestParameters['weapon']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WeaponFromJSON(jsonValue));
    }

    /**
     */
    async createWeapon(requestParameters: CreateWeaponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Weapon> {
        const response = await this.createWeaponRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteWeaponRaw(requestParameters: DeleteWeaponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteWeapon().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/weapon/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteWeapon(requestParameters: DeleteWeaponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteWeaponRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getAllWeaponsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Weapon>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/weapon`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WeaponFromJSON));
    }

    /**
     */
    async getAllWeapons(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Weapon>> {
        const response = await this.getAllWeaponsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getWeaponByIdRaw(requestParameters: GetWeaponByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Weapon>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getWeaponById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/weapon/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WeaponFromJSON(jsonValue));
    }

    /**
     */
    async getWeaponById(requestParameters: GetWeaponByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Weapon> {
        const response = await this.getWeaponByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getWeaponsBySearchParametersRaw(requestParameters: GetWeaponsBySearchParametersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Weapon>>> {
        const queryParameters: any = {};

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['manufacturer'] != null) {
            queryParameters['manufacturer'] = requestParameters['manufacturer'];
        }

        if (requestParameters['systemNumber'] != null) {
            queryParameters['systemNumber'] = requestParameters['systemNumber'];
        }

        if (requestParameters['barrelNumber'] != null) {
            queryParameters['barrelNumber'] = requestParameters['barrelNumber'];
        }

        if (requestParameters['basepieceNumber'] != null) {
            queryParameters['basepieceNumber'] = requestParameters['basepieceNumber'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/weapon/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WeaponFromJSON));
    }

    /**
     */
    async getWeaponsBySearchParameters(requestParameters: GetWeaponsBySearchParametersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Weapon>> {
        const response = await this.getWeaponsBySearchParametersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getWeaponsBySearchQueryRaw(requestParameters: GetWeaponsBySearchQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Weapon>>> {
        if (requestParameters['query'] == null) {
            throw new runtime.RequiredError(
                'query',
                'Required parameter "query" was null or undefined when calling getWeaponsBySearchQuery().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/weapon/search={query}`.replace(`{${"query"}}`, encodeURIComponent(String(requestParameters['query']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WeaponFromJSON));
    }

    /**
     */
    async getWeaponsBySearchQuery(requestParameters: GetWeaponsBySearchQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Weapon>> {
        const response = await this.getWeaponsBySearchQueryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateWeaponRaw(requestParameters: UpdateWeaponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateWeapon().'
            );
        }

        if (requestParameters['weapon'] == null) {
            throw new runtime.RequiredError(
                'weapon',
                'Required parameter "weapon" was null or undefined when calling updateWeapon().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/weapon/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: WeaponToJSON(requestParameters['weapon']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateWeapon(requestParameters: UpdateWeaponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateWeaponRaw(requestParameters, initOverrides);
    }

}
